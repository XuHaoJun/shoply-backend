//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::{prelude::*, Set};

use crate::Uuid;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum MemberAuthStatus {
    Inactive = 0,
    Active = 1,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "member")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,

    pub auth_status: MemberAuthStatus,

    pub password: String,

    pub email: Option<String>,
    pub phone: Option<String>,

    pub name: String,
    pub birthday: Option<DateTimeUtc>,
    pub avatar: Option<String>,

    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub updated_password_at: DateTimeUtc,
    pub last_login_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    Addresses,
    Sales,
    Orders,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Addresses => Entity::has_many(super::member_address::Entity).into(),
            Self::Sales => Entity::has_many(super::sale::Entity).into(),
            Self::Orders => Entity::has_many(super::order::Entity).into(),
        }
    }
}

impl Related<super::member_address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Addresses.def()
    }
}

impl Related<super::sale::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sales.def()
    }
}

impl Related<super::order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}


impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        let now = chrono::Utc::now();
        return Self {
            id: Set(Uuid::now_v7()),
            created_at: Set(now),
            updated_at: Set(now.clone()),
            updated_password_at: Set(now.clone()),
            ..ActiveModelTrait::default()
        };
    }
}
